/// <reference types="tree-sitter-cli/dsl" />
// @ts-check
// https://www.cs.purdue.edu/homes/hosking/m3/reference/syntax.html

module.exports = grammar({
  name: "Modula3",
  // word: ($) =>
  //   choice(
  //     $.AND,
  //     $.ANY,
  //     $.ARRAY,
  //     $.AS,
  //     $.BEGIN,
  //     $.BITS,
  //     $.BRANDED,
  //     $.BY,
  //     $.CASE,
  //     $.CONST,
  //     $.DIV,
  //     $.DO,
  //     $.ELSE,
  //     $.ELSIF,
  //     $.END,
  //     $.EVAL,
  //     $.EXCEPT,
  //     $.EXCEPTION,
  //     $.EXIT,
  //     $.EXPORTS,
  //     $.FINALLY,
  //     $.FOR,
  //     $.FROM,
  //     $.GENERIC,
  //     $.IF,
  //     $.IMPORT,
  //     $.IN,
  //     $.INTERFACE,
  //     $.LOCK,
  //     $.LOOP,
  //     $.METHODS,
  //     $.MOD,
  //     $.MODULE,
  //     $.NOT,
  //     $.OBJECT,
  //     $.OF,
  //     $.OR,
  //     $.OVERRIDES,
  //     $.PROCEDURE,
  //     $.RAISE,
  //     $.RAISES,
  //     $.READONLY,
  //     $.RECORD,
  //     $.REF,
  //     $.REPEAT,
  //     $.RETURN,
  //     $.REVEAL,
  //     $.ROOT,
  //     $.SET,
  //     $.THEN,
  //     $.TO,
  //     $.TRY,
  //     $.TYPE,
  //     $.TYPECASE,
  //     $.UNSAFE,
  //     $.UNTIL,
  //     $.UNTRACED,
  //     $.VALUE,
  //     $.VAR,
  //     $.WHILE,
  //     $.WITH,

  rules: {
    // Compilation unit productions:
    Compilation: ($) =>
      seq(
        optional($.UNSAFE),
        choice(seq(choice($.Interface, $.Module), $.GenInf, $.GenMod)),
      ),
    Interface: ($) =>
      choice(
        seq(
          $.INTERFACE,
          $.Id,
          ";",
          repeat($.Import),
          repeat($.Decl),
          $.END,
          $.Id,
          ".",
        ),
        seq($.INTERFACE, $.Id, "=", $.Id, $.GenActls, $.END, $.Id, "."),
      ),
    Module: ($) =>
      choice(
        seq(
          $.MODULE,
          $.Id,
          optional(seq($.EXPORTS, $.IdList)),
          ";",
          repeat($.Import),
          $.Block,
          $.Id,
          ".",
        ),
        seq(
          $.MODULE,
          $.Id,
          optional(seq($.EXPORTS, $.IdList)),
          "=",
          $.Id,
          $.GenActls,
          $.END,
          $.Id,
          ".",
        ),
      ),
    GenInf: ($) =>
      seq(
        $.GENERIC,
        $.INTERFACE,
        $.Id,
        $.GenFmls,
        ";",
        repeat($.Import),
        repeat($.Decl),
        $.END,
        $.Id,
        ".",
      ),
    GenMod: ($) =>
      seq(
        $.GENERIC,
        $.MODULE,
        $.Id,
        $.GenFmls,
        ";",
        repeat($.Import),
        $.Block,
        $.Id,
        ".",
      ),
    Import: ($) => choice($.AsImport, $.FromImport),
    AsImport: ($) =>
      seq($.IMPORT, $.ImportItem, repeat(seq(",", $.ImportItem)), ";"),
    FromImport: ($) => seq($.FROM, $.Id, $.IMPORT, $.IdList, ";"),
    Block: ($) => seq(repeat($.Decl), $.BEGIN, $.S, $.END),
    Decl: ($) =>
      seq(
        choice(
          seq($.CONST, repeat(seq($.ConstDecl, ";"))),
          seq($.TYPE, repeat(seq($.TypeDecl, ";"))),
          seq($.EXCEPTION, repeat(seq($.ExceptionDecl, ";"))),
          seq($.VAR, repeat(seq($.VariableDecl, ";"))),
          seq($.ProcedureHead, optional(seq("=", $.Block, $.Id)), ";"),
          seq($.REVEAL, repeat(seq($.QualId, choice("=", "<:"), $.Type, ";"))),
        ),
      ),
    GenFmls: ($) => seq("(", optional($.IdList), ")"),
    GenActls: ($) => seq("(", optional($.IdList), ")"),
    ImportItem: ($) => choice($.Id, seq($.Id, $.AS, $.Id)),
    ConstDecl: ($) => seq($.Id, optional(seq(":", $.Type)), "=", $.ConstExpr),
    TypeDecl: ($) => seq($.Id, choice("=", "<:"), $.Type),
    ExceptionDecl: ($) => seq($.Id, optional(seq("(", $.Type, ")"))),
    VariableDecl: ($) =>
      seq($.IdList, choice(seq(":", $.Type), seq(":=", $.Expr))),
    ProcedureHead: ($) => seq($.PROCEDURE, $.Id, $.Signature),
    Signature: ($) =>
      seq(
        "(",
        $.Formals,
        ")",
        optional(seq(":", $.Type)),
        optional(seq($.RAISES, $.Raises)),
      ),
    Formals: ($) =>
      repeat(seq($.Formal, repeat(seq(";", $.Formal)), optional(";"))),
    Formal: ($) =>
      seq(
        optional($.Mode),
        $.IdList,
        choice(seq(":", $.Type), seq(":=", $.ConstExpr)),
      ),
    Mode: ($) => choice($.VALUE, $.VAR, $.READONLY),
    Raises: ($) =>
      choice(
        seq("{", optional(seq($.QualId, repeat1(seq(",", $.QualId)))), "}"),
        $.ANY,
      ),

    // Statement productions:
    Stmt: ($) =>
      choice(
        $.AssignSt,
        $.Block,
        $.CallSt,
        $.CaseSt,
        $.ExitSt,
        $.EvalSt,
        $.ForSt,
        $.IfSt,
        $.LockSt,
        $.LoopSt,
        $.RaiseSt,
        $.RepeatSt,
        $.ReturnSt,
        $.TCaseSt,
        $.TryXptSt,
        $.TryFinSt,
        $.WhileSt,
        $.WithSt,
      ),
    S: ($) => repeat(seq($.Stmt, repeat(seq(";", $.Stmt)), optional(";"))),
    AssignSt: ($) => seq($.Expr, ":=", $.Expr),
    CallSt: ($) =>
      seq(
        $.Expr,
        "(",
        optional(seq($.Actual, repeat(seq(",", $.Actual)))),
        ")",
      ),
    CaseSt: ($) =>
      seq(
        $.CASE,
        $.Expr,
        $.OF,
        optional($.Case),
        repeat(seq("|", $.Case)),
        optional(seq($.ELSE, $.S)),
        $.END,
      ),
    ExitSt: ($) => $.EXIT,
    EvalSt: ($) => seq($.EVAL, $.Expr),
    ForSt: ($) =>
      seq(
        $.FOR,
        $.Id,
        ":=",
        $.Expr,
        $.TO,
        $.Expr,
        optional(seq($.BY, $.Expr)),
        $.DO,
        $.S,
        $.END,
      ),
    IfSt: ($) =>
      seq(
        $.IF,
        $.Expr,
        $.THEN,
        $.S,
        repeat(seq($.ELSIF, $.Expr, $.THEN, $.S)),
        optional(seq($.ELSE, $.S)),
        $.END,
      ),
    LockSt: ($) => seq($.LOCK, $.Expr, $.DO, $.S, $.END),
    LoopSt: ($) => seq($.LOOP, $.S, $.END),
    RaiseSt: ($) => seq($.RAISE, $.QualId, optional(seq("(", $.Expr, ")"))),
    RepeatSt: ($) => seq($.REPEAT, $.S, $.UNTIL, $.Expr),
    ReturnSt: ($) => seq($.RETURN, optional($.Expr)),
    TCaseSt: ($) =>
      seq(
        $.TYPECASE,
        $.Expr,
        $.OF,
        optional($.TCase),
        repeat(seq("|", $.TCase)),
        optional(seq($.ELSE, $.S)),
        $.END,
      ),
    TryXptSt: ($) =>
      seq(
        $.TRY,
        $.S,
        $.EXCEPT,
        optional($.Handler),
        repeat(seq("|", $.Handler)),
        optional(seq($.ELSE, $.S)),
        $.END,
      ),
    TryFinSt: ($) => seq($.TRY, $.S, $.FINALLY, $.S, $.END),
    WhileSt: ($) => seq($.WHILE, $.Expr, $.DO, $.S, $.END),
    WithSt: ($) =>
      seq($.WITH, $.Binding, repeat(seq(",", $.Binding)), $.DO, $.S, $.END),

    Case: ($) => seq($.Labels, repeat(seq(",", $.Labels)), "=>", $.S),
    Labels: ($) => seq($.ConstExpr, optional(seq("..", $.ConstExpr))),
    Handler: ($) =>
      seq(
        $.QualId,
        repeat(seq(",", $.QualId)),
        optional(seq("(", $.Id, ")")),
        "=>",
        $.S,
      ),
    TCase: ($) =>
      seq(
        $.Type,
        repeat(seq(",", $.Type)),
        optional(seq("(", $.Id, ")")),
        "=>",
        $.S,
      ),
    Binding: ($) => seq($.Id, "=", $.Expr),
    Actual: ($) => choice($.Type, seq(optional(seq($.Id, ":=")), $.Expr)),

    // Type productions:
    Type: ($) =>
      choice(
        $.TypeName,
        $.ArrayType,
        $.PackedType,
        $.EnumType,
        $.ObjectType,
        $.ProcedureType,
        $.RecordType,
        $.RefType,
        $.SetType,
        $.SubrangeType,
        seq("(", $.Type, ")"),
      ),
    ArrayType: ($) =>
      seq(
        $.ARRAY,
        optional(seq($.Type, repeat(seq(",", $.Type)))),
        $.OF,
        $.Type,
      ),
    PackedType: ($) => seq($.BITS, $.ConstExpr, $.FOR, $.Type),
    EnumType: ($) => seq("{", optional($.IdList), "}"),
    ObjectType: ($) =>
      seq(
        optional(choice($.TypeName, $.ObjectType)),
        optional($.Brand),
        $.OBJECT,
        $.Fields,
        optional(seq($.METHODS, $.Methods)),
        optional(seq($.OVERRIDES, $.Overrides)),
        $.END,
      ),
    ProcedureType: ($) => seq($.PROCEDURE, $.Signature),
    RecordType: ($) => seq($.RECORD, $.Fields, $.END),
    RefType: ($) => seq(optional($.UNTRACED), optional($.Brand), $.REF, $.Type),
    SetType: ($) => seq($.SET, $.OF, $.Type),
    SubrangeType: ($) => seq("[", $.ConstExpr, "..", "]"),
    Brand: ($) => seq($.BRANDED, optional($.ConstExpr)),
    Fields: ($) =>
      repeat(seq($.Field, repeat(seq(";", $.Field)), optional(";"))),
    Field: ($) =>
      seq($.IdList, choice(seq(":", $.Type), seq(":=", $.ConstExpr))),
    Methods: ($) =>
      repeat(
        seq($.Method, repeat(optional(seq(";", $.Method))), optional(";")),
      ),
    Method: ($) => seq($.Id, $.Signature, optional(seq(":=", $.ConstExpr))),
    Overrides: ($) =>
      optional(seq($.Override, repeat(seq(";", $.Override)), optional(";"))),
    Override: ($) => seq($.Id, ":=", $.ConstExpr),

    // Expression productions:
    ConstExpr: ($) => $.Expr,
    Expr: ($) => seq($.E1, repeat(seq($.OR, $.E1))),
    E1: ($) => seq($.E2, repeat(seq($.AND, $.E2))),
    E2: ($) => seq(repeat($.NOT), $.E3),
    E3: ($) => seq($.E4, repeat(seq($.Relop, $.E4))),
    E4: ($) => seq($.E5, repeat(seq($.Addop, $.E5))),
    E5: ($) => seq($.E6, repeat(seq($.Mulop, $.E6))),
    E6: ($) => seq(repeat(choice("+", "-")), $.E7),
    E7: ($) => seq($.E8, repeat($.Selector)),
    E8: ($) =>
      choice(
        $.Id,
        $.Number,
        $.CharLiteral,
        $.TextLiteral,
        $.Constructor,
        seq("(", $.Expr, ")"),
      ),

    Relop: ($) => choice("=", "#", "<", "<=", ">", ">=", $.IN),
    Addop: ($) => choice("+", "-", "&"),
    Mulop: ($) => choice("*", "/", $.DIV, $.MOD),

    Selector: ($) =>
      choice(
        "^",
        seq(".", $.Id),
        seq("[", $.Expr, repeat(seq(",", $.Expr)), "]"),
        seq("(", optional(seq($.Actual, repeat(seq(",", $.Actual)))), ")"),
      ),
    Constructor: ($) =>
      seq(
        $.Type,
        "{",
        optional(choice($.SetCons, $.RecordCons, $.ArrayCons)),
        "}",
      ),
    SetCons: ($) => seq($.SetElt, repeat(seq(",", $.SetElt))),
    SetElt: ($) => seq($.Expr, optional(seq("..", $.SetElt))),
    RecordCons: ($) => seq($.RecordElt, repeat(seq(",", $.RecordElt))),
    RecordElt: ($) => seq(optional(seq($.Id, ":=")), $.Expr),
    ArrayCons: ($) =>
      seq($.Expr, repeat(seq(",", $.Expr)), optional(seq(",", ":"))),

    // Miscellaneous productions:
    IdList: ($) => seq($.Id, repeat(seq(",", $.Id))),
    QualId: ($) => seq($.Id, optional(seq(".", $.Id))),
    TypeName: ($) => choice($.QualId, $.ROOT, seq($.UNTRACED, $.ROOT)),

    // Token productions:
    Id: ($) => seq($.Letter, repeat(choice($.Letter, $.Digit, "_"))),
    Literal: ($) => choice($.Number, $.CharLiteral, $.TextLiteral),
    CharLiteral: ($) =>
      seq("'", choice($.PrintingChar, $.Escape, $.DQUOTE), "'"),
    TextLiteral: ($) =>
      seq($.DQUOTE, repeat(choice($.PrintingChar, $.Escape, "'")), $.DQUOTE),
    Escape: ($) =>
      choice(
        seq("\\", "n"),
        seq("\\", "t"),
        seq("\\", "r"),
        seq("\\", "f"),
        seq("\\", "\\"),
        seq("\\", "\\"),
        seq("\\", $.DQUOTE),
        seq("\\", $.OctalDigit, $.OctalDigit, $.OctalDigit),
      ),
    Number: ($) =>
      choice(
        repeat1($.Digit),
        seq(repeat1($.Digit), "_", $.HexDigit, repeat($.HexDigit)),
        seq(repeat1($.Digit), ".", repeat1($.Digit), optional($.Exp)),
      ),
    Exp: ($) =>
      seq(
        choice("E", "e", "D", "d", "X", "x"),
        optional(choice("+", "-")),
        repeat1($.Digit),
      ),
    PrintingChar: ($) => choice($.Letter, $.Digit),
    HexDigit: ($) => choice($.Digit, /[a-fA-F]/),
    Digit: () => /[0-9]/,
    OctalDigit: () => /[0-7]/,
    Letter: () => /[a-zA-Z]/,
    OtherChar: () =>
      choice(
        " ",
        "!",
        "#",
        "$",
        "%",
        "&",
        "(",
        ")",
        "*",
        "+",
        ",",
        "-",
        ".",
        "/",
        ":",
        ";",
        "<",
        "=",
        ">",
        "?",
        "@",
        "[",
        "]",
        "^",
        "_",
        "`",
        "{",
        "}",
        " ",
      ),
    // ExtendedChar: (_) =>
    DQUOTE: () => '"',
    // Keywords:
    AND: (_) => "AND",
    ANY: (_) => "ANY",
    ARRAY: (_) => "ARRAY",
    AS: (_) => "AS",
    BEGIN: (_) => "BEGIN",
    BITS: (_) => "BITS",
    BRANDED: (_) => "BRANDED",
    BY: (_) => "BY",
    CASE: (_) => "CASE",
    CONST: (_) => "CONST",
    DIV: (_) => "DIV",
    DO: (_) => "DO",
    ELSE: (_) => "ELSE",
    ELSIF: (_) => "ELSIF",
    END: (_) => "END",
    EVAL: (_) => "EVAL",
    EXCEPT: (_) => "EXCEPT",
    EXCEPTION: (_) => "EXCEPTION",
    EXIT: (_) => "EXIT",
    EXPORTS: (_) => "EXPORTS",
    FINALLY: (_) => "FINALLY",
    FOR: (_) => "FOR",
    FROM: (_) => "FROM",
    GENERIC: (_) => "GENERIC",
    IF: (_) => "IF",
    IMPORT: (_) => "IMPORT",
    IN: (_) => "IN",
    INTERFACE: (_) => "INTERFACE",
    LOCK: (_) => "LOCK",
    LOOP: (_) => "LOOP",
    METHODS: (_) => "METHODS",
    MOD: (_) => "MOD",
    MODULE: (_) => "MODULE",
    NOT: (_) => "KNOT",
    OBJECT: (_) => "OBJECT",
    OF: (_) => "OF",
    OR: (_) => "OR",
    OVERRIDES: (_) => "OVERRIDES",
    PROCEDURE: (_) => "PROCEDURE",
    RAISE: (_) => "RAISE",
    RAISES: (_) => "RAISES",
    READONLY: (_) => "READONLY",
    RECORD: (_) => "RECORD",
    REF: (_) => "REF",
    REPEAT: (_) => "REPEAT",
    RETURN: (_) => "RETURN",
    REVEAL: (_) => "REVEAL",
    ROOT: (_) => "ROOT",
    SET: (_) => "SET",
    THEN: (_) => "THEN",
    TO: (_) => "TO",
    TRY: (_) => "TRY",
    TYPE: (_) => "TYPE",
    TYPECASE: (_) => "TYPECASE",
    UNSAFE: (_) => "UNSAFE",
    UNTIL: (_) => "UNTIL",
    UNTRACED: (_) => "UNTRACED",
    VALUE: (_) => "VALUE",
    VAR: (_) => "VAR",
    WHILE: (_) => "WHILE",
    WITH: (_) => "WITH",

    // Reserved Identifiers:
    ABS: (_) => "ABS",
    ADDRESS: (_) => "ADDRESS",
    ADR: (_) => "ADR",
    ADRSIZE: (_) => "ADRSIZE",
    BITSIZE: (_) => "BITSIZE",
    BOOLEAN: (_) => "BOOLEAN",
    BYTESIZE: (_) => "BYTESIZE",
    CARDINAL: (_) => "CARDINAL",
    CEILING: (_) => "CEILING",
    CHAR: (_) => "CHAR",
    DEC: (_) => "DEC",
    DISPOSE: (_) => "DISPOSE",
    EXTENDED: (_) => "EXTENDED",
    FALSE: (_) => "FALSE",
    FIRST: (_) => "FIRST",
    FLOAT: (_) => "FLOAT",
    FLOOR: (_) => "FLOOR",
    INC: (_) => "INC",
    INTEGER: (_) => "INTEGER",
    ISTYPE: (_) => "ISTYPE",
    LAST: (_) => "LAST",
    LONGINT: (_) => "LONGINT",
    LONGREAL: (_) => "LONGREAL",
    LOOPHOLE: (_) => "LOOPHOLE",
    MAX: (_) => "MAX",
    MIN: (_) => "MIN",
    MUTEX: (_) => "MUTEX",
    NARROW: (_) => "NARROW",
    NEW: (_) => "NEW",
    NIL: (_) => "NIL",
    NULL: (_) => "NULL",
    NUMBER: (_) => "NUMBER",
    ORD: (_) => "ORD",
    REAL: (_) => "REAL",
    REFANY: (_) => "REFANY",
    ROUND: (_) => "ROUND",
    SUBARRAY: (_) => "SUBARRAY",
    TEXT: (_) => "TEXT",
    TRUE: (_) => "TRUE",
    TRUNC: (_) => "TRUNC",
    TYPECODE: (_) => "TYPECODE",
    VAL: (_) => "VAL",
  },
});
